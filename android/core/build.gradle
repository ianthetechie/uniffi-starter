plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    // The magic plugin that automates the cargo integration
    id 'com.github.willir.rust.cargo-ndk-android'
}

android {
    namespace 'com.ianthetechie.foobar.core'
    compileSdk 34

    defaultConfig {
        minSdk 29
        targetSdk 34

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'

    // Essential! Note that UniFFI dictates the minimum supported version, and this may change with new releases
    implementation "net.java.dev.jna:jna:5.12.0@aar"

    testImplementation 'junit:junit:4.13.2'

    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

cargoNdk {
    module  = "../rust"  // Directory containing Cargo.toml
    librariesNames = ["libfoobar.so"]
}

android.libraryVariants.all { variant ->

    cargoNdk.librariesNames.each { libraryName ->
        // Define a task name based on the variant name and the library name
        def taskName = "generate${variant.name.capitalize()}UniFFIBindingsFor${libraryName.capitalize()}"
        // Register the task
        def generateBindings = tasks.register(taskName, Exec) {
            // Path relative to this module ~ relative to this gradle file.
            workingDir project.file('../../rust')
            // Note: Adjust the library path based on the library name
            // Here we assume arm64-v8a is always a target
            commandLine 'cargo', 'run', '-p', 'uniffi-bindgen', 'generate',
                    '--library', project.file("./src/main/jniLibs/arm64-v8a/${libraryName}"),
                    '--language', 'kotlin',
                    '--out-dir', project.file("${buildDir}/generated/source/uniffi/${variant.name}/java")

            dependsOn "buildCargoNdk${variant.name.capitalize()}"
        }

        variant.javaCompileProvider.get().dependsOn(generateBindings)
        // Some stuff here is likely broken, since Android Tests don't run after running gradle build,
        // but do otherwise. Also CI is funky.
        tasks.named("compile${variant.name.capitalize()}Kotlin").configure {dependsOn generateBindings}
        tasks.named("connectedDebugAndroidTest").configure {dependsOn generateBindings}
    }

    def sourceSet = variant.sourceSets.find { it.name == variant.name }
    sourceSet.kotlin.srcDir new File(buildDir, "generated/source/uniffi/${variant.name}/java")
    sourceSet.java.srcDir new File(buildDir, "generated/source/uniffi/${variant.name}/java")

    // UniFFI tutorial notes that they made several attempts like this but were unsuccessful coming
    // to a good solution for forcing the directory to be marked as generated (short of checking in
    // project files, I suppose).
//    idea.module.generatedSourceDirs += file("${buildDir}/generated/source/uniffi/${variant.name}/java/uniffi")

    sourceSet.java.srcDir 'src/main/java'
}
